--- /src/main/java/com/vaadin/client/ui/VFilterSelect.java
+++ /src/main/java/com/vaadin/client/ui/VFilterSelect.java
@@ -62,6 +62,7 @@
 import com.vaadin.client.ApplicationConnection;
 import com.vaadin.client.BrowserInfo;
 import com.vaadin.client.ComponentConnector;
+import com.vaadin.client.ComputedStyle;
 import com.vaadin.client.ConnectorMap;
 import com.vaadin.client.Focusable;
 import com.vaadin.client.UIDL;
@@ -84,7 +85,7 @@
  * TODO needs major refactoring (to be extensible etc)
  */
 @SuppressWarnings("deprecation")
-public class VFilterSelect extends Composite implements Field, KeyDownHandler,
+public class VFilterSelectPatched extends Composite implements Field, KeyDownHandler,
         KeyUpHandler, ClickHandler, FocusHandler, BlurHandler, Focusable,
         SubPartAware, HandlesAriaCaption, HandlesAriaInvalid,
         HandlesAriaRequired {
@@ -227,7 +228,7 @@
         SuggestionPopup() {
             super(true, false, true);
             debug("VFS.SP: constructor()");
-            setOwner(VFilterSelect.this);
+            setOwner(VFilterSelectPatched.this);
             menu = new SuggestionMenu();
             setWidget(menu);
 
@@ -285,7 +286,7 @@
                     getElement().setId("VAADIN_COMBOBOX_OPTIONLIST");
 
                     menu.setSuggestions(currentSuggestions);
-                    final int x = VFilterSelect.this.getAbsoluteLeft();
+                    final int x = VFilterSelectPatched.this.getAbsoluteLeft();
 
                     topPosition = tb.getAbsoluteTop();
                     topPosition += tb.getOffsetHeight();
@@ -342,11 +343,11 @@
             }
             if (active) {
                 DOM.sinkEvents(down, Event.ONCLICK);
-                down.setClassName(VFilterSelect.this.getStylePrimaryName()
+                down.setClassName(VFilterSelectPatched.this.getStylePrimaryName()
                         + "-nextpage");
             } else {
                 DOM.sinkEvents(down, 0);
-                down.setClassName(VFilterSelect.this.getStylePrimaryName()
+                down.setClassName(VFilterSelectPatched.this.getStylePrimaryName()
                         + "-nextpage-off");
             }
         }
@@ -363,11 +364,11 @@
 
             if (active) {
                 DOM.sinkEvents(up, Event.ONCLICK);
-                up.setClassName(VFilterSelect.this.getStylePrimaryName()
+                up.setClassName(VFilterSelectPatched.this.getStylePrimaryName()
                         + "-prevpage");
             } else {
                 DOM.sinkEvents(up, 0);
-                up.setClassName(VFilterSelect.this.getStylePrimaryName()
+                up.setClassName(VFilterSelectPatched.this.getStylePrimaryName()
                         + "-prevpage-off");
             }
 
@@ -454,7 +455,7 @@
 
             public void scrollUp() {
                 debug("VFS.SP.LPS: scrollUp()");
-                if (currentPage + pagesToScroll > 0) {
+                if (pageLength > 0 && currentPage + pagesToScroll > 0) {
                     pagesToScroll--;
                     cancel();
                     schedule(200);
@@ -463,7 +464,8 @@
 
             public void scrollDown() {
                 debug("VFS.SP.LPS: scrollDown()");
-                if (totalMatches > (currentPage + pagesToScroll + 1)
+                if (pageLength > 0
+                        && totalMatches > (currentPage + pagesToScroll + 1)
                         * pageLength) {
                     pagesToScroll++;
                     cancel();
@@ -544,31 +546,33 @@
         public void setPosition(int offsetWidth, int offsetHeight) {
             debug("VFS.SP: setPosition()");
 
-            int top = -1;
-            int left = -1;
+            int top = topPosition;
+            int left = getPopupLeft();
 
             // reset menu size and retrieve its "natural" size
             menu.setHeight("");
-            if (currentPage > 0) {
+            if (currentPage > 0 && !hasNextPage()) {
                 // fix height to avoid height change when getting to last page
                 menu.fixHeightTo(pageLength);
             }
-            offsetHeight = getOffsetHeight();
 
+            final int desiredHeight = offsetHeight = getOffsetHeight();
             final int desiredWidth = getMainWidth();
-            Element menuFirstChild = menu.getElement().getFirstChildElement()
-                    .cast();
-            int naturalMenuWidth = menuFirstChild.getOffsetWidth();
+
+            debug("VFS.SP:     desired[" + desiredWidth + ", " + desiredHeight
+                    + "]");
+
+            Element menuFirstChild = menu.getElement().getFirstChildElement().cast();
+            final int naturalMenuWidth = menuFirstChild.getOffsetWidth();
 
             if (popupOuterPadding == -1) {
-                popupOuterPadding = Util.measureHorizontalPaddingAndBorder(
-                        getElement(), 2);
+                popupOuterPadding = Util
+                        .measureHorizontalPaddingAndBorder(getElement(), 2);
             }
 
             if (naturalMenuWidth < desiredWidth) {
                 menu.setWidth((desiredWidth - popupOuterPadding) + "px");
                 menuFirstChild.getStyle().setWidth(100, Unit.PCT);
-                naturalMenuWidth = desiredWidth;
             }
 
             if (BrowserInfo.get().isIE()) {
@@ -576,43 +580,65 @@
                  * IE requires us to specify the width for the container
                  * element. Otherwise it will be 100% wide
                  */
-                int rootWidth = naturalMenuWidth - popupOuterPadding;
+                int rootWidth = Math.max(desiredWidth, naturalMenuWidth)
+                        - popupOuterPadding;
                 getContainerElement().getStyle().setWidth(rootWidth, Unit.PX);
             }
 
-            if (offsetHeight + getPopupTop() > Window.getClientHeight()
-                    + Window.getScrollTop()) {
+            final int vfsHeight = VFilterSelectPatched.this.getOffsetHeight();
+            final int spaceAvailableAbove = top - vfsHeight;
+            final int spaceAvailableBelow = Window.getClientHeight() - top;
+            if (spaceAvailableBelow < offsetHeight
+                    && spaceAvailableBelow < spaceAvailableAbove) {
                 // popup on top of input instead
-                top = getPopupTop() - offsetHeight
-                        - VFilterSelect.this.getOffsetHeight();
+                top -= offsetHeight + vfsHeight;
                 if (top < 0) {
+                    offsetHeight += top;
                     top = 0;
                 }
             } else {
-                top = getPopupTop();
-                /*
-                 * Take popup top margin into account. getPopupTop() returns the
-                 * top value including the margin but the value we give must not
-                 * include the margin.
-                 */
-                int topMargin = (top - topPosition);
-                top -= topMargin;
+                offsetHeight = Math.min(offsetHeight, spaceAvailableBelow);
             }
 
             // fetch real width (mac FF bugs here due GWT popups overflow:auto )
             offsetWidth = menuFirstChild.getOffsetWidth();
-            if (offsetWidth + getPopupLeft() > Window.getClientWidth()
-                    + Window.getScrollLeft()) {
-                left = VFilterSelect.this.getAbsoluteLeft()
-                        + VFilterSelect.this.getOffsetWidth()
-                        + Window.getScrollLeft() - offsetWidth;
+
+            if (offsetHeight < desiredHeight) {
+                int menuHeight = offsetHeight;
+                if (isPagingEnabled) {
+                    menuHeight -= up.getOffsetHeight() + down.getOffsetHeight()
+                            + status.getOffsetHeight();
+                } else {
+                    final ComputedStyle s = new ComputedStyle(menu.getElement());
+                    menuHeight -= s.getIntProperty("marginBottom")
+                            + s.getIntProperty("marginTop");
+                }
+                // MGNLUI-3685 avoid negative size, else menu.setHeight(..)
+                // below will throw an exception. Give a sensible default height.
+                if (menuHeight <= 0) {
+                    menuHeight = 100;
+                }
+
+                menu.setHeight(menuHeight + "px");
+
+                final int naturalMenuWidthPlusScrollBar = naturalMenuWidth
+                        + Util.getNativeScrollbarSize();
+                if (offsetWidth < naturalMenuWidthPlusScrollBar) {
+                    menu.setWidth(naturalMenuWidthPlusScrollBar + "px");
+                }
+            }
+
+            if (offsetWidth + left > Window.getClientWidth()) {
+                left = VFilterSelectPatched.this.getAbsoluteLeft()
+                        + VFilterSelectPatched.this.getOffsetWidth() - offsetWidth;
                 if (left < 0) {
                     left = 0;
+                    menu.setWidth(Window.getClientWidth() + "px");
                 }
-            } else {
-                left = getPopupLeft();
             }
+
             setPopupPosition(left, top);
+            menu.scrollSelectionIntoView();
         }
 
         /**
@@ -655,11 +681,11 @@
         public void updateStyleNames(UIDL uidl,
                 AbstractComponentState componentState) {
             debug("VFS.SP: updateStyleNames()");
-            setStyleName(VFilterSelect.this.getStylePrimaryName()
+            setStyleName(VFilterSelectPatched.this.getStylePrimaryName()
                     + "-suggestpopup");
-            menu.setStyleName(VFilterSelect.this.getStylePrimaryName()
+            menu.setStyleName(VFilterSelectPatched.this.getStylePrimaryName()
                     + "-suggestmenu");
-            status.setClassName(VFilterSelect.this.getStylePrimaryName()
+            status.setClassName(VFilterSelectPatched.this.getStylePrimaryName()
                     + "-status");
             if (ComponentStateUtil.hasStyles(componentState)) {
                 for (String style : componentState.styles) {
@@ -710,6 +736,22 @@
             super(true);
             debug("VFS.SM: constructor()");
             addDomHandler(this, LoadEvent.getType());
+            DOM.setStyleAttribute(getElement(), "overflowY", Style.Overflow.AUTO.getCssName());
+        }
+
+        /**
+         * This and the method below are part of Vaadin's MenuBar since 7.2.6 but was put directly here
+         * as otherwise that would have meant patching not only MenuBar but also
+         * MenuItem and MenuBarConnector.
+         */
+        private void scrollItemIntoView(MenuItem item) {
+            if (item != null) {
+                item.getElement().scrollIntoView();
+            }
+        }
+
+        public void scrollSelectionIntoView() {
+            scrollItemIntoView(getSelectedItem());
         }
 
         /**
@@ -1108,7 +1150,7 @@
     /**
      * Default constructor.
      */
-    public VFilterSelect() {
+    public VFilterSelectPatched() {
         tb = createTextBox();
         suggestionPopup = createSuggestionPopup();
 